import telebot
from telebot import types
import requests
from bs4 import BeautifulSoup
import fake_useragent
import time


# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
API_TOKEN = '7301863423:AAEhs6eCB7QXFgIbxrweJ4Sk0cBYx_UOv7I'
# –ê–¥—Ä–µ—Å —Å–µ—Ä–≤–∏—Å–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
ANALYTICS_URL = 'http://backend:8001/analytics'

bot = telebot.TeleBot(API_TOKEN)

@bot.message_handler(commands=['start'])
def send_welcome(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    itembtn1 = types.KeyboardButton('–ü–æ–∏—Å–∫ –≤–∞–∫–∞–Ω—Å–∏–∏')
    itembtn2 = types.KeyboardButton('–ê–Ω–∞–ª–∏—Ç–∏–∫–∞')
    markup.add(itembtn1,itembtn2)
    bot.send_message(message.chat.id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –≠—Ç–æ –±–æ—Ç –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤–∞–∫–∞–Ω—Å–∏–π –Ω–∞ HH.ru. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)

@bot.message_handler(func=lambda message: message.text == '–ü–æ–∏—Å–∫ –≤–∞–∫–∞–Ω—Å–∏–∏')
def search_vacancy(message):
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏, –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏:")
    bot.register_next_step_handler(message, process_vacancy_search)

def process_vacancy_search(message):
    search_text = message.text
    vacancies = get_vacancies(search_text)
    if vacancies:
        for vacancy in vacancies:
            text = f"–í–∞–∫–∞–Ω—Å–∏—è: {vacancy['title']}\n" \
                   f"–ó–∞—Ä–ø–ª–∞—Ç–∞: {vacancy['salary']}\n" \
                   f"–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã: {vacancy['experience']}\n" \
                   f"–¢–∏–ø –∑–∞–Ω—è—Ç–æ—Å—Ç–∏: {vacancy['employment_type']}\n" \
                   f"–ì—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã: {vacancy['schedule']}\n" \
                   f"–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: {vacancy['location']}\n" \
                   f"–°—Å—ã–ª–∫–∞: {vacancy['link']}\n" \
                   f"–¢–µ–≥–∏: {', '.join(vacancy['tags'])}"
            bot.send_message(message.chat.id, text)
    else:
        bot.send_message(message.chat.id, "–í–∞–∫–∞–Ω—Å–∏–∏ –ø–æ –¥–∞–Ω–Ω–æ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")

def get_vacancies(search_text):
    ua = fake_useragent.UserAgent()
    vacancies = []
    for page in range(1, 6):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∞–∫—Å–∏–º—É–º 5 —Å—Ç—Ä–∞–Ω–∏—Ü
        try:
            data = requests.get(
                url=f"https://hh.ru/search/vacancy?text={search_text}&area=2&isDefaultArea=true&page={page}",
                headers={"user-agent": ua.random}
            )
            if data.status_code != 200:
                continue
            soup = BeautifulSoup(data.content, "lxml")
            for a in soup.find_all("a", attrs={"data-qa": "vacancy-serp__vacancy-title"}):
                vacancy_link = f"https://hh.ru{a.attrs['href']}"
                vacancy = get_vacancy(vacancy_link)
                if vacancy:
                    vacancies.append(vacancy)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        time.sleep(1)
    return vacancies

def get_vacancy(vacancy_link):
    ua = fake_useragent.UserAgent()
    try:
        data = requests.get(
            url=vacancy_link,
            headers={"user-agent": ua.random}
        )
        if data.status_code != 200:
            return
        soup = BeautifulSoup(data.content, "lxml")
        title = soup.find(attrs={"data-qa": "vacancy-title"}).text
        company = soup.find(attrs={"data-qa": "vacancy-company-name"}).text
        salary = soup.find(attrs={"data-qa": "vacancy-salary"}).text
        experience = soup.find(attrs={"data-qa": "vacancy-experience"}).text
        employment_type = soup.find(attrs={"data-qa": "vacancy-employment-type"}).text
        schedule = soup.find(attrs={"data-qa": "vacancy-work-schedule"}).text
        location = soup.find(attrs={"data-qa": "vacancy-view-location"}).text
        tags = [tag.text for tag in soup.find(attrs={"data-qa": "vacancy-serp__vacancy-skills"}).find_all(attrs={"data-qa": "bloko-tag__section_text"})]
        vacancy = {
            "title": title,
            "company": company,
            "salary": salary,
            "experience": experience,
            "employment_type": employment_type,
            "schedule": schedule,
            "location": location,
            "link": vacancy_link,
            "tags": tags
        }
        return vacancy
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –≤–∞–∫–∞–Ω—Å–∏–∏: {e}")
        return None

@bot.message_handler(commands=['analytics'])
def send_welcome(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    itembtn1 = types.KeyboardButton('–ê–Ω–∞–ª–∏—Ç–∏–∫–∞')
    markup.add(itembtn1)

@bot.message_handler(func=lambda message: message.text == '–ê–Ω–∞–ª–∏—Ç–∏–∫–∞')
def get_analytics(message):
    try:
        response = requests.get(ANALYTICS_URL)
        response.raise_for_status()  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—à–∏–±–∫–∏ HTTP
        data = response.json()

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –¥–ª—è Telegram
        text = f"üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ HH.ru:\n" \
               f"  –í–∞–∫–∞–Ω—Å–∏—è: {data['vacancies']}\n" \
               f"  –ö–∞–Ω–¥–∏–¥–∞—Ç: {data['resumes']}\n" \
               f"  –í–∞–∫–∞–Ω—Å–∏–π: {data['vacancy_count']}\n" \
               f"  –ö–∞–Ω–¥–∏–¥–∞—Ç–æ–≤: {data['candidate_count']}\n" \
               f"  –°—Ä–µ–¥–Ω–µ–µ —á–∏—Å–ª–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é: {data['avg_candidates_per_vacancy']:.2f}"
               
        
                 
                
               
        bot.send_message(message.chat.id, text)

    except requests.exceptions.RequestException as e:
        bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")
bot.polling()